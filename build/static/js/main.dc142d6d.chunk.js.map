{"version":3,"sources":["partials/component3/words.js","App.js","serviceWorker.js","index.js"],"names":["words","word","wordList","a","b","filter","w","split","includes","map","react_default","createElement","key","className","WordButtons","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","letter","handleClick","bind","assertThisInitialized","target","name","alphabet","Math","floor","random","length","randomWord","setState","passClick","_this2","l","onClick","isActive","letterBtn","Component","Words","_this3","id","words_WordButtons","App","component3_words","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dc142d6d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../../App.css';\r\n\r\nconst words = [\r\n  {\"word\":\"zero\"},\r\n  {\"word\":\"midnight\"},\r\n  {\"word\":\"yard\"},\r\n  {\"word\":\"volume\"},\r\n  {\"word\":\"boat\"},\r\n  {\"word\":\"belly\"},\r\n  {\"word\":\"demand\"},\r\n  {\"word\":\"intelligence\"},\r\n  {\"word\":\"literacy\"},\r\n  {\"word\":\"voice\"},\r\n  {\"word\":\"miserable\"},\r\n  {\"word\":\"free\"},\r\n  {\"word\":\"growth\"},\r\n  {\"word\":\"residence\"},\r\n  {\"word\":\"apathy\"},\r\n  {\"word\":\"majority\"},\r\n  {\"word\":\"fast\"},\r\n  {\"word\":\"outline\"},\r\n  {\"word\":\"degree\"},\r\n  {\"word\":\"fright\"},\r\n];\r\n\r\nfunction randomWord() {\r\n  const alphabet = 'bcdeghijklmnopqstuvwxyz'.split('');\r\n  return alphabet[Math.floor(Math.random()*alphabet.length)];\r\n}\r\n\r\nfunction wordList(a, b) {\r\n  return (b) ? words.filter(w => !w.word.split(\"\").includes(a)).map(w => <div key={w.word} className=\"active-words\">{w.word}</div>) : words.filter(w => w.word.split(\"\").includes(a)).map(w => <div key={w.word} className=\"removed-words\">{w.word}</div>)\r\n}\r\n\r\nclass WordButtons extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {letter: \"\" }\r\n    this.handleClick = this.handleClick.bind(this)\r\n  }\r\n\r\n  handleClick(a) {\r\n    const b = (a.target.name === \"reset\") ? '' : (a.target.name === \"random\") ? randomWord() : a.target.name;\r\n    this.setState(state =>  ({ \"letter\": b }));\r\n    this.props.passClick(b);\r\n  }\r\n\r\n  isActive(a, b) {\r\n    return (a === this.state.letter) ? \"word-btn active\" : \"word-btn\"\r\n  }\r\n\r\n  letterBtn(a,b) {\r\n    return a.map((l) =>\r\n      <button key={l.letter} name={l.letter} onClick={this.handleClick} className={this.isActive(l.letter,l)}>\r\n        {l.letter}\r\n      </button>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const letters = [{\"letter\": \"a\"},{\"letter\": \"f\"},{\"letter\": \"r\"},{\"letter\": \"random\"},{\"letter\": \"reset\"},]\r\n    return (\r\n      <div className=\"words-btn-row\">\r\n        { this.letterBtn(letters,this.state.letter) }\r\n        <div className=\"active-letter\"> Selected Letter: {this.state.letter} </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nclass Words extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {letter: \"\"}\r\n    this.handleClick = this.handleClick.bind(this)\r\n  }\r\n\r\n  handleClick(a) {\r\n    this.setState(state =>  ({ \"letter\": a }));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"words-contain\">\r\n        <h1 id=\"component3\">Component #3</h1>\r\n        <div className=\"description\"><p>Select a letter below to remove an any word with that letter. Select random and a random letter will be chosen for you.</p></div>\r\n        <WordButtons passClick={this.handleClick}></WordButtons>\r\n        <div className=\"words-list-contain\">\r\n          <div className=\"word-list-wrap\">\r\n            <h3 className=\"words-title\" >Word List</h3>\r\n            <div className=\"word-list\">\r\n              {wordList(this.state.letter, true)}\r\n            </div>\r\n          </div>\r\n          <div className=\"word-list-wrap\">\r\n            <h3 className=\"words-title removed\" >Words Removed</h3>\r\n            <div className=\"word-list\">\r\n              {wordList(this.state.letter, false)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Words;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Words from './partials/component3/words.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Words></Words>\n        </header>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}